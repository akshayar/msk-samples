Parameters:
  SubnetAId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet A of Kafka Cluster to which you want to attach the KafkaConnect Connector.
  SubnetBId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet B of Kafka Cluster to which you want to attach the KafkaConnect Connector.
    Default: ""
  MSKClusterSG:
    Type: AWS::EC2::SecurityGroup::Id
    Description: MSK Security Group
  DatabaseSG:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Database Security Group
  MSKClusterBootstrap:
    Type: String
    Description: Bootstrap Server detail of Kafka Cluster to which you want to attach the KafkaConnect Connector.
  TopicPrefix:
    Type: String
    Description: TopicPrefix
    Default: mskconnnectmysql
  DatabaseIncludeList:
    Type: String
    Default: mydb
  DBDetailsSecretName:
    Type: String
  SchemaRegistryUrl:
    Type: String
  ConnectorName:
    Type: String
    Default: debezium-mysql-secret-manager-json-noauth
  MSKConnectConnectorLogGroup:
    Type: String
    Default: /aws/msk-connect-mysql
  WorkerConfigurationArn:
    Type: String
  CustomPluginArn:
    Type: String
  PluginBucketName:
    Type: String
    Default: "aksh-code-binaries-2"
Resources:
  DebeziumMySQLSourceConnector:
    Type: AWS::KafkaConnect::Connector
    Properties:
      ConnectorDescription: "Debezium Connector for MySQL"
      ConnectorName: !Ref ConnectorName
      KafkaCluster:
        ApacheKafkaCluster:
          BootstrapServers: !Ref MSKClusterBootstrap
          Vpc:
            SecurityGroups:
              - !Ref MSKClusterSG
              - !Ref DatabaseSG
            Subnets:
              - !Ref SubnetAId
              - !Ref SubnetBId
      KafkaClusterClientAuthentication:
        AuthenticationType: IAM
      KafkaClusterEncryptionInTransit:
        EncryptionType: TLS
      KafkaConnectVersion: 2.7.1
      LogDelivery:
        WorkerLogDelivery:
          CloudWatchLogs:
            Enabled: true
            LogGroup: !Ref MSKConnectConnectorLogGroup
      Plugins:
        - CustomPlugin:
            CustomPluginArn: !Ref CustomPluginArn
            Revision: 1
      ServiceExecutionRoleArn: !GetAtt mskConnectRole.Arn
      Capacity:
        ProvisionedCapacity:
          WorkerCount: 1
          McuCount: 2
      WorkerConfiguration:
        WorkerConfigurationArn: !Ref WorkerConfigurationArn
        Revision: 1
      ConnectorConfiguration:
        connector.class: io.debezium.connector.mysql.MySqlConnector
        tasks.max: "1"
        database.hostname: !Join [ ":", [ "${secretsmanager", !Ref DBDetailsSecretName, "host}" ] ]
        database.port: !Join [ ":", [ "${secretsmanager", !Ref DBDetailsSecretName, "port}" ] ]
        database.user: !Join [ ":", [ "${secretsmanager", !Ref DBDetailsSecretName, "username}" ] ]
        database.password: !Join [ ":", [ "${secretsmanager", !Ref DBDetailsSecretName, "password}" ] ]
        database.server.id: "184051"
        database.include.list: !Ref DatabaseIncludeList
        database.allowPublicKeyRetrieval: "true"
        topic.prefix: !Ref TopicPrefix
        schema.history.internal.kafka.topic: !Sub "${TopicPrefix}.schema-changes"
        schema.history.internal.kafka.bootstrap.servers: !Ref MSKClusterBootstrap
        schema.history.internal.consumer.security.protocol: "SASL_SSL"
        schema.history.internal.consumer.sasl.mechanism: "AWS_MSK_IAM"
        schema.history.internal.consumer.sasl.jaas.config: "software.amazon.msk.auth.iam.IAMLoginModule required;"
        schema.history.internal.consumer.sasl.client.callback.handler.class: "software.amazon.msk.auth.iam.IAMClientCallbackHandler"
        schema.history.internal.producer.security.protocol: "SASL_SSL"
        schema.history.internal.producer.sasl.mechanism: "AWS_MSK_IAM"
        schema.history.internal.producer.sasl.jaas.config: "software.amazon.msk.auth.iam.IAMLoginModule required;"
        schema.history.internal.producer.sasl.client.callback.handler.class: "software.amazon.msk.auth.iam.IAMClientCallbackHandler"
        key.converter: "org.apache.kafka.connect.storage.StringConverter"
        key.converter.schema.registry.url: !Ref SchemaRegistryUrl
        key.converter.schemas.enable: "false"
        value.converter: "org.apache.kafka.connect.json.JsonConverter"
        value.converter.schema.registry.url: !Ref SchemaRegistryUrl
        value.converter.schemas.enable: "false"
  mskConnectManagedPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for MSk Connect
      Path: /
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "kafka-cluster:Connect"
              - "kafka-cluster:AlterCluster"
              - "kafka-cluster:DescribeCluster"
            Resource: !Sub "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/*"
          - Effect: Allow
            Action:
              - "kafka-cluster:DescribeTopicDynamicConfiguration"
              - "kafka-cluster:*Topic*"
              - "kafka-cluster:WriteData"
              - "kafka-cluster:ReadData"
            Resource: !Sub "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:topic/*"
          - Effect: Allow
            Action:
              - "kafka-cluster:AlterGroup"
              - "kafka-cluster:DescribeGroup"
            Resource: !Sub "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:group/*"
          - Effect: Allow
            Action: 'kafka:GetBootstrapBrokers'
            Resource: !Sub "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/*"
          - Effect: Allow
            Action:
              - "secretsmanager:GetResourcePolicy"
              - "secretsmanager:GetSecretValue"
              - "secretsmanager:DescribeSecret"
              - "secretsmanager:ListSecretVersionIds"
            Resource: "*"
          - Effect: Allow
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:CreateGrant"
              - "kms:DescribeKey"
            Resource: "*"
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:GetObjectAcl"
            Resource: !Sub "arn:aws:s3:::${PluginBucketName}/*"
  mskConnectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "kafkaconnect.amazonaws.com"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref mskConnectManagedPolicy
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Path: /