AWSTemplateFormatVersion: 2010-09-09
Parameters:
  SourceKafkaClusterBootstrap:
    Type: String
    Description: Source cluster bootstrap.
  DestinationKafkaClusterBootstrap:
    Type: String
    Description: Destination cluster bootstrap.
  ECSClusterArn:
    Type: String
    Description: ECS cluster arn
  ECSServiceRoleArn:
    Type: String
    Description: ECS Service role arn
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnet 1
  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnet 2
  MSKCluster1SG:
    Type: AWS::EC2::SecurityGroup::Id
    Description: MSK Security Group
  MSKCluster2SG:
    Type: AWS::EC2::SecurityGroup::Id
    Description: MSK Security Group
  CreateService:
    Type: String
    Description: If create service
    Default: "true"
  KafkaConnectImage:
    Type: String
    Description: Change this parameters if you build an image and want to use that.
    Default: "arawa3/kafka-connect-mm2"
  DesiredCount:
    Type: String
    Default: 1
Conditions:
  CreateService:  !Equals [!Ref CreateService, 'true']
Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, kafka-connect-mm2, TaskDefinition]]

  MM2TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonMSKFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Path: /
  MM2TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties: 
      ContainerDefinitions: 
        - Name: kafka-connect-mm2
          Image: arawa3/kafka-connect-mm2
          PortMappings:
            - ContainerPort: 8083
            - ContainerPort: 9901
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref "AWS::Region"
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: kafka-connect-mm2
          Environment:
            - Name: DESTINATION_BOOTSTRAP_SERVER
              Value: !Ref DestinationKafkaClusterBootstrap
            - Name: GROUP_ID
              Value: 1
            - Name: CONFIG_STORAGE_TOPIC
              Value: mm2-config-2
            - Name: OFFSET_STORAGE_TOPIC
              Value: mm2-offset-2
            - Name: STATUS_STORAGE_TOPIC
              Value: mm2-status-2
          DockerLabels:
            PROMETHEUS_EXPORTER_PORT: 9901
      Cpu: 2048
      Memory: 4096
      NetworkMode: awsvpc
      RequiresCompatibilities: 
        - FARGATE
      ExecutionRoleArn: !GetAtt MM2TaskRole.Arn
  MM2Service:
    Type: AWS::ECS::Service
    DependsOn:  MM2ALBListener
    Condition: CreateService
    Properties:
      Cluster: !Ref ECSClusterArn
      DesiredCount: !Ref DesiredCount
      LoadBalancers:
        - ContainerName: "kafka-connect-mm2"
          ContainerPort: 8083
          TargetGroupArn: !Ref MM2ALBTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref MM2ECSSecurityGroup
            - !Ref MSKCluster1SG
            - !Ref MSKCluster2SG
          AssignPublicIp: ENABLED
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      TaskDefinition: !Ref MM2TaskDefinition
      ServiceName: "kafka-connect-mm2"
      LaunchType: FARGATE
  MM2ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  MM2ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8083
          ToPort: 8083
          SourceSecurityGroupId:
            Fn::GetAtt:
              - MM2ALBSecurityGroup
              - GroupId
  MM2ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      HealthCheckPath: /connectors
      Matcher:
        HttpCode: '200'
      Port: 8083
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC
      TargetType: ip
  MM2ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: MM2ALB
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MM2ALBTargetGroup
      LoadBalancerArn: !Ref MM2ALB
      Port: 80
      Protocol: HTTP
  MM2ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: kafka-connect-mm2
      Scheme: internal
      SecurityGroups:
        - !GetAtt MM2ALBSecurityGroup.GroupId
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

Outputs:
  MM2Url:
    Description: MM2 URL
    Value: !GetAtt MM2ALB.DNSName